// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

	DMux4Way(in=load, sel=address[13..14], a=RamLoada, b=RamLoadb, c=ScreenLoad, d=Void); //Organizing Load bit values
	Or(a=RamLoada, b=RamLoadb, out=RamLoad);	// Passing through value for screen since 2 acceptable answers


	RAM16K(in=in, load=RamLoad, address=address[0..13], out=RamOut); //0 - 0011 1111 1111 1111

	ALU(x[15]=false, x[0..14]=address, y[0..13]=true, y[14..15]=false, zx=false, nx=true, zy=false, ny=false, f=true, no=true, out[0..12]=ScreenAddress, zr=void, ng=voided);

	Screen(in=in, load=ScreenLoad, address=ScreenAddress, out=ScreenOut); //0100 0000 0000 0000 - 0101 1111 1111 1111
	Keyboard(out=KeyOut); //0110 0000 0000 00000


	Mux4Way16(a=RamOut, b=RamOut, c=ScreenOut, d=KeyOut, sel=address[13..14], out=out);
	





}