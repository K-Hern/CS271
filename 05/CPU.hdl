// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

	

//Checking to see if instruction is A or C instruction
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=InitialMuxOut);
//Setting ARegister Load bit to 1 if instruction is A
    Not(in=instruction[15], out=AInstructLoad);
//Checking to see if both a C instruction and if A reg is a destination
    And(a=instruction[15], b=instruction[5], out=CtypeARegDest);
//Setting ARegister Load bit to 1 if either is a dest or if A instruction
    Or(a=AInstructLoad, b=CtypeARegDest, out=ARegLoad);


//Loading ARegister with instruction
    ARegister(in=InitialMuxOut, load=ARegLoad, out=ARegOut, out[15]=MVoidBitF, out[0..14]=addressM);



//y of ALU is either inM if a bit is 1 or d if not
	Mux16(a=ARegOut, b=inM, sel=instruction[12], out=SecondaryMuxOut);
    ALU(x=DRegOut, y=SecondaryMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=ALUZero, ng=ALUNeg);

//Checking to make sure D is a destination and that Instruction is of type C
    And(a=instruction[15], b=instruction[4], out=DRegLoad);
    DRegister(in=ALUout, load=DRegLoad, out=DRegOut);

//Checking to make sure M is a destination and that Instruction is of type C
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM, out=writeMBit);

//Storing address in addressM if we are writing to M, else submitting nothing 
 //   Mux16(a=false, b=addressMOut, sel=writeMBit, out[15]=MVoidBit, out[0..14]=addressM);


//Cheking to see which jump condition has been selected, and filling that selection with the MSB (1 if C instruction, othwerise all return false)
    DMux8Way(in=instruction[15], sel=instruction[0..2], a=Null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

    
//Checking to see if either an A instruction or NULL jump in which case increment by 1
    Or(a=AInstructLoad, b=Null, out=AtypeOrNULLInc);

//JGT
    Or(a=ALUZero, b=ALUNeg, out=ALUZeroOrNeg);
    Not(in=ALUZeroOrNeg, out=ALUGreaterThanZero);
    And(a=ALUGreaterThanZero, b=JGT, out=JGTOut);

//JEQ
    And(a=ALUZero, b=JEQ, out=JEQOut);

//JGE
    Or(a=ALUGreaterThanZero, b=ALUZero, out=ALUGreaterThanOrEqualZero);
    And(a=ALUGreaterThanOrEqualZero, b=JGE, out=JGEOut);

//JLT
    And(a=ALUNeg, b=JLT, out=JLTOut);

//JNE
    Not(in=ALUZero, out=ALUNotZero);
    And(a=ALUNotZero, b=JNE, out=JNEOut);

//JLE
    Or(a=ALUNeg, b=ALUZero, out=ALULessThanOrEqualZero);
    And(a=ALULessThanOrEqualZero, b=JLE, out=JLEOut);

//Checking to see if any of the jump conditions (Except Null) have been chosen and if their respective conditions have been met
    Or8Way(in[0]=false, in[1]=JGTOut, in[2]=JEQOut, in[3]=JGEOut, in[4]=JLTOut, in[5]=JNEOut, in[6]=JLEOut, in[7]=JMP, out=PCLoad);

//If Jump selected but condition failed we still need to inc
    Not(in=PCLoad, out=JJJSelectedButFailed);
//Setting PC inc to true if either A type, NULL jump, or failed jump
    Or(a=AtypeOrNULLInc, b=JJJSelectedButFailed, out=PCInc);

    

    PC(in=ARegOut, load=PCLoad, inc=PCInc, reset=reset, out[15]=void, out[0..14]=pc);


}